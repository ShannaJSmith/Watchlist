{"ast":null,"code":"var _jsxFileName = \"/Users/shannasmith/code/projects/watchlist/watchlist/src/pages/Watched.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { GlobalContext } from '../context/GlobalState';\nimport MovieCard from '../components/MovieCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Watched = () => {\n  _s();\n\n  const {\n    watched\n  } = useContext(GlobalContext);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-page\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"heading\",\n          children: \"Watched Movies\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this), watched.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-grid\",\n        children: watched.map(movie => /*#__PURE__*/_jsxDEV(MovieCard, {\n          movie: movie,\n          type: \"watched\"\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"no-movies\",\n        children: \"There are no movies in your watched list :(\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Watched, \"AfIMuTqA5EYZNlmjSC8XNgB6VWA=\");\n\n_c = Watched;\nexport default Watched;\n\nvar _c;\n\n$RefreshReg$(_c, \"Watched\");","map":{"version":3,"sources":["/Users/shannasmith/code/projects/watchlist/watchlist/src/pages/Watched.jsx"],"names":["React","useContext","GlobalContext","MovieCard","Watched","watched","length","map","movie","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM;AAAEC,IAAAA;AAAF,MAAcJ,UAAU,CAACC,aAAD,CAA9B;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,+BACE;AAAI,UAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,EAIGG,OAAO,CAACC,MAAR,GAAiB,CAAjB,gBACC;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,kBACGD,OAAO,CAACE,GAAR,CAAaC,KAAD,iBACX,QAAC,SAAD;AAA0B,UAAA,KAAK,EAAEA,KAAjC;AAAwC,UAAA,IAAI,EAAC;AAA7C,WAAgBA,KAAK,CAACC,EAAtB;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cADD,gBAOC;AAAI,QAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CAtBD;;GAAML,O;;KAAAA,O;AAwBN,eAAeA,OAAf","sourcesContent":["import React, { useContext } from 'react';\nimport { GlobalContext } from '../context/GlobalState';\nimport MovieCard from '../components/MovieCard';\n\nconst Watched = () => {\n  const { watched } = useContext(GlobalContext);\n  return (\n    <div className=\"movie-page\">\n      <div className=\"container\">\n        <div className=\"header\">\n          <h1 className=\"heading\">Watched Movies</h1>\n        </div>\n        {watched.length > 0 ? (\n          <div className=\"movie-grid\">\n            {watched.map((movie) => (\n              <MovieCard key={movie.id} movie={movie} type=\"watched\" />\n            ))}\n          </div>\n        ) : (\n          <h2 className=\"no-movies\">\n            There are no movies in your watched list :(\n          </h2>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Watched;\n"]},"metadata":{},"sourceType":"module"}