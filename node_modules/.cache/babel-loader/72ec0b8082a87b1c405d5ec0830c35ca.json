{"ast":null,"code":"import _slicedToArray from\"/Users/shannasmith/code/projects/watchlist/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{createContext,useReducer,useEffect}from'react';import AppReducer from'./AppReducer';// inital state:\nimport{jsx as _jsx}from\"react/jsx-runtime\";var initialState={// when app loads intitial state will be empty if nothing is stored in localstorage\n// if data is in localstorage. convert it back into an array with json.parse\nwatchlist:localStorage.getItem('watchlist')?JSON.parse(localStorage.getItem('watchlist')):[],watched:localStorage.getItem('watched')?JSON.parse(localStorage.getItem('watched')):[]};// create context:\nexport var GlobalContext=/*#__PURE__*/createContext(initialState);// provider components:\nexport var GlobalProvider=function GlobalProvider(props){var _useReducer=useReducer(AppReducer,initialState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];// triggered every time state is changed (e.g. movie added to watchlist)\nuseEffect(function(){// localstorage must be a string\nlocalStorage.setItem('watchlist',JSON.stringify(state.watchlist));localStorage.setItem('watched',JSON.stringify(state.watched));},[state]);// actions:\n// (tells app what to do after addmovie button is clicked)\nvar addMovieToWatchlist=function addMovieToWatchlist(movie){dispatch({type:'ADD_MOVIE_TO_WATCHLIST',payload:movie});};// (tells app what to do after remove button is clicked)\nvar removeMovieFromWatchlist=function removeMovieFromWatchlist(id){dispatch({type:'REMOVE_MOVIE_FROM_WATCHLIST',payload:id});};// (tells app what to do after addmovie button from watchlist is clicked)\nvar addMovieToWatched=function addMovieToWatched(movie){dispatch({type:'ADD_MOVIE_TO_WATCHED',payload:movie});};var moveToWatchlist=function moveToWatchlist(movie){dispatch({type:'MOVE_TO_WATCHLIST',payload:movie});};var removeFromWatched=function removeFromWatched(id){dispatch({type:'REMOVE_FROM_WATCHED',payload:id});};return/*#__PURE__*/_jsx(GlobalContext.Provider,{value:{watchlist:state.watchlist,watched:state.watched,addMovieToWatchlist:addMovieToWatchlist,removeMovieFromWatchlist:removeMovieFromWatchlist,addMovieToWatched:addMovieToWatched,moveToWatchlist:moveToWatchlist,removeFromWatched:removeFromWatched},children:props.children});};","map":{"version":3,"sources":["/Users/shannasmith/code/projects/watchlist/src/context/GlobalState.jsx"],"names":["React","createContext","useReducer","useEffect","AppReducer","initialState","watchlist","localStorage","getItem","JSON","parse","watched","GlobalContext","GlobalProvider","props","state","dispatch","setItem","stringify","addMovieToWatchlist","movie","type","payload","removeMovieFromWatchlist","id","addMovieToWatched","moveToWatchlist","removeFromWatched","children"],"mappings":"gIAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,CAA+BC,UAA/B,CAA2CC,SAA3C,KAA4D,OAA5D,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CAEA;2CACA,GAAMC,CAAAA,YAAY,CAAG,CACnB;AACA;AACAC,SAAS,CAAEC,YAAY,CAACC,OAAb,CAAqB,WAArB,EACPC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADO,CAEP,EALe,CAMnBG,OAAO,CAAEJ,YAAY,CAACC,OAAb,CAAqB,SAArB,EACLC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CADK,CAEL,EARe,CAArB,CAWA;AACA,MAAO,IAAMI,CAAAA,aAAa,cAAGX,aAAa,CAACI,YAAD,CAAnC,CAEP;AACA,MAAO,IAAMQ,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,KAAD,CAAW,CACvC,gBAA0BZ,UAAU,CAACE,UAAD,CAAaC,YAAb,CAApC,4CAAOU,KAAP,iBAAcC,QAAd,iBAEA;AACAb,SAAS,CAAC,UAAM,CACd;AACAI,YAAY,CAACU,OAAb,CAAqB,WAArB,CAAkCR,IAAI,CAACS,SAAL,CAAeH,KAAK,CAACT,SAArB,CAAlC,EACAC,YAAY,CAACU,OAAb,CAAqB,SAArB,CAAgCR,IAAI,CAACS,SAAL,CAAeH,KAAK,CAACJ,OAArB,CAAhC,EACD,CAJQ,CAIN,CAACI,KAAD,CAJM,CAAT,CAMA;AACA;AACA,GAAMI,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,KAAD,CAAW,CACrCJ,QAAQ,CAAC,CAAEK,IAAI,CAAE,wBAAR,CAAkCC,OAAO,CAAEF,KAA3C,CAAD,CAAR,CACD,CAFD,CAGA;AACA,GAAMG,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAACC,EAAD,CAAQ,CACvCR,QAAQ,CAAC,CAAEK,IAAI,CAAE,6BAAR,CAAuCC,OAAO,CAAEE,EAAhD,CAAD,CAAR,CACD,CAFD,CAGA;AACA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACL,KAAD,CAAW,CACnCJ,QAAQ,CAAC,CAAEK,IAAI,CAAE,sBAAR,CAAgCC,OAAO,CAAEF,KAAzC,CAAD,CAAR,CACD,CAFD,CAIA,GAAMM,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACN,KAAD,CAAW,CACjCJ,QAAQ,CAAC,CAAEK,IAAI,CAAE,mBAAR,CAA6BC,OAAO,CAAEF,KAAtC,CAAD,CAAR,CACD,CAFD,CAIA,GAAMO,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACH,EAAD,CAAQ,CAChCR,QAAQ,CAAC,CAAEK,IAAI,CAAE,qBAAR,CAA+BC,OAAO,CAAEE,EAAxC,CAAD,CAAR,CACD,CAFD,CAIA,mBACE,KAAC,aAAD,CAAe,QAAf,EACE,KAAK,CAAE,CACLlB,SAAS,CAAES,KAAK,CAACT,SADZ,CAELK,OAAO,CAAEI,KAAK,CAACJ,OAFV,CAGLQ,mBAAmB,CAAnBA,mBAHK,CAILI,wBAAwB,CAAxBA,wBAJK,CAKLE,iBAAiB,CAAjBA,iBALK,CAMLC,eAAe,CAAfA,eANK,CAOLC,iBAAiB,CAAjBA,iBAPK,CADT,UAWGb,KAAK,CAACc,QAXT,EADF,CAeD,CA/CM","sourcesContent":["import React, { createContext, useReducer, useEffect } from 'react';\nimport AppReducer from './AppReducer';\n\n// inital state:\nconst initialState = {\n  // when app loads intitial state will be empty if nothing is stored in localstorage\n  // if data is in localstorage. convert it back into an array with json.parse\n  watchlist: localStorage.getItem('watchlist')\n    ? JSON.parse(localStorage.getItem('watchlist'))\n    : [],\n  watched: localStorage.getItem('watched')\n    ? JSON.parse(localStorage.getItem('watched'))\n    : [],\n};\n\n// create context:\nexport const GlobalContext = createContext(initialState);\n\n// provider components:\nexport const GlobalProvider = (props) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  // triggered every time state is changed (e.g. movie added to watchlist)\n  useEffect(() => {\n    // localstorage must be a string\n    localStorage.setItem('watchlist', JSON.stringify(state.watchlist));\n    localStorage.setItem('watched', JSON.stringify(state.watched));\n  }, [state]);\n\n  // actions:\n  // (tells app what to do after addmovie button is clicked)\n  const addMovieToWatchlist = (movie) => {\n    dispatch({ type: 'ADD_MOVIE_TO_WATCHLIST', payload: movie });\n  };\n  // (tells app what to do after remove button is clicked)\n  const removeMovieFromWatchlist = (id) => {\n    dispatch({ type: 'REMOVE_MOVIE_FROM_WATCHLIST', payload: id });\n  };\n  // (tells app what to do after addmovie button from watchlist is clicked)\n  const addMovieToWatched = (movie) => {\n    dispatch({ type: 'ADD_MOVIE_TO_WATCHED', payload: movie });\n  };\n\n  const moveToWatchlist = (movie) => {\n    dispatch({ type: 'MOVE_TO_WATCHLIST', payload: movie });\n  };\n\n  const removeFromWatched = (id) => {\n    dispatch({ type: 'REMOVE_FROM_WATCHED', payload: id });\n  };\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        watchlist: state.watchlist,\n        watched: state.watched,\n        addMovieToWatchlist,\n        removeMovieFromWatchlist,\n        addMovieToWatched,\n        moveToWatchlist,\n        removeFromWatched,\n      }}\n    >\n      {props.children}\n    </GlobalContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}