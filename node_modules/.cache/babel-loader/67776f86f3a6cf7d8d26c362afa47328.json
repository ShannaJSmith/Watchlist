{"ast":null,"code":"import React,{useContext}from'react';import{GlobalContext}from'../context/GlobalState';import'../styles/Add.scss';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ResultCard=function ResultCard(_ref){var movie=_ref.movie;var _useContext=useContext(GlobalContext),addMovieToWatchlist=_useContext.addMovieToWatchlist,watchlist=_useContext.watchlist,watched=_useContext.watched,addMovieToWatched=_useContext.addMovieToWatched;var storedMovie=watchlist.find(function(film){return film.id===movie.id;});var storedMovieWatched=watched.find(function(film){return film.id===movie.id;});// const disableWatchlist = storedMovie ? true : storedMovieWatched ? true : false;\nvar disableWatchlist=storedMovie||storedMovieWatched?true:false;var disableWatched=storedMovieWatched?true:false;return/*#__PURE__*/_jsxs(\"div\",{className:\"result-card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"poster-wrapper\",children:movie.poster_path?/*#__PURE__*/_jsx(\"img\",{src:\"https://image.tmdb.org/t/p/w200\".concat(movie.poster_path),alt:\"\".concat(movie.title,\" Poster\")}):/*#__PURE__*/_jsx(\"div\",{className:\"filler-poster\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"info\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"header\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"title\",children:movie.title}),/*#__PURE__*/_jsx(\"h4\",{className:\"release-date\",children:movie.release_date?movie.release_date.substring(0,4):'-'})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"btn\",onClick:function onClick(){return addMovieToWatchlist(movie);},disabled:disableWatchlist,children:\"Add to Watchlist\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn\",onClick:function onClick(){return addMovieToWatched(movie);},disabled:disableWatched,children:\"Add to Watched\"})]})]})]});};export default ResultCard;","map":{"version":3,"sources":["/Users/shannasmith/code/projects/watchlist/src/components/ResultCard.jsx"],"names":["React","useContext","GlobalContext","ResultCard","movie","addMovieToWatchlist","watchlist","watched","addMovieToWatched","storedMovie","find","film","id","storedMovieWatched","disableWatchlist","disableWatched","poster_path","title","release_date","substring"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,KAAkC,OAAlC,CACA,OAASC,aAAT,KAA8B,wBAA9B,CACA,MAAO,oBAAP,C,wFAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,MAAe,IAAZC,CAAAA,KAAY,MAAZA,KAAY,CAChC,gBACEH,UAAU,CAACC,aAAD,CADZ,CAAQG,mBAAR,aAAQA,mBAAR,CAA6BC,SAA7B,aAA6BA,SAA7B,CAAwCC,OAAxC,aAAwCA,OAAxC,CAAiDC,iBAAjD,aAAiDA,iBAAjD,CAGA,GAAIC,CAAAA,WAAW,CAAGH,SAAS,CAACI,IAAV,CAAe,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,EAAL,GAAYR,KAAK,CAACQ,EAA5B,EAAf,CAAlB,CACA,GAAIC,CAAAA,kBAAkB,CAAGN,OAAO,CAACG,IAAR,CAAa,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,EAAL,GAAYR,KAAK,CAACQ,EAA5B,EAAb,CAAzB,CACA;AACA,GAAME,CAAAA,gBAAgB,CAAGL,WAAW,EAAII,kBAAf,CAAoC,IAApC,CAA2C,KAApE,CACA,GAAME,CAAAA,cAAc,CAAGF,kBAAkB,CAAG,IAAH,CAAU,KAAnD,CAEA,mBACE,aAAK,SAAS,CAAC,aAAf,wBACE,YAAK,SAAS,CAAC,gBAAf,UACGT,KAAK,CAACY,WAAN,cACC,YACE,GAAG,0CAAoCZ,KAAK,CAACY,WAA1C,CADL,CAEE,GAAG,WAAKZ,KAAK,CAACa,KAAX,WAFL,EADD,cAMC,YAAK,SAAS,CAAC,eAAf,EAPJ,EADF,cAWE,aAAK,SAAS,CAAC,MAAf,wBACE,aAAK,SAAS,CAAC,QAAf,wBACE,WAAI,SAAS,CAAC,OAAd,UAAuBb,KAAK,CAACa,KAA7B,EADF,cAEE,WAAI,SAAS,CAAC,cAAd,UACGb,KAAK,CAACc,YAAN,CAAqBd,KAAK,CAACc,YAAN,CAAmBC,SAAnB,CAA6B,CAA7B,CAAgC,CAAhC,CAArB,CAA0D,GAD7D,EAFF,GADF,cAOE,aAAK,SAAS,CAAC,UAAf,wBACE,eACE,SAAS,CAAC,KADZ,CAEE,OAAO,CAAE,yBAAMd,CAAAA,mBAAmB,CAACD,KAAD,CAAzB,EAFX,CAGE,QAAQ,CAAEU,gBAHZ,8BADF,cAQE,eACE,SAAS,CAAC,KADZ,CAEE,OAAO,CAAE,yBAAMN,CAAAA,iBAAiB,CAACJ,KAAD,CAAvB,EAFX,CAGE,QAAQ,CAAEW,cAHZ,4BARF,GAPF,GAXF,GADF,CAsCD,CAhDD,CAkDA,cAAeZ,CAAAA,UAAf","sourcesContent":["import React, { useContext } from 'react';\nimport { GlobalContext } from '../context/GlobalState';\nimport '../styles/Add.scss';\n\nconst ResultCard = ({ movie }) => {\n  const { addMovieToWatchlist, watchlist, watched, addMovieToWatched } =\n    useContext(GlobalContext);\n\n  let storedMovie = watchlist.find((film) => film.id === movie.id);\n  let storedMovieWatched = watched.find((film) => film.id === movie.id);\n  // const disableWatchlist = storedMovie ? true : storedMovieWatched ? true : false;\n  const disableWatchlist = storedMovie || storedMovieWatched ? true : false;\n  const disableWatched = storedMovieWatched ? true : false;\n\n  return (\n    <div className=\"result-card\">\n      <div className=\"poster-wrapper\">\n        {movie.poster_path ? (\n          <img\n            src={`https://image.tmdb.org/t/p/w200${movie.poster_path}`}\n            alt={`${movie.title} Poster`}\n          />\n        ) : (\n          <div className=\"filler-poster\"></div>\n        )}\n      </div>\n      <div className=\"info\">\n        <div className=\"header\">\n          <h3 className=\"title\">{movie.title}</h3>\n          <h4 className=\"release-date\">\n            {movie.release_date ? movie.release_date.substring(0, 4) : '-'}\n          </h4>\n        </div>\n        <div className=\"controls\">\n          <button\n            className=\"btn\"\n            onClick={() => addMovieToWatchlist(movie)}\n            disabled={disableWatchlist}\n          >\n            Add to Watchlist\n          </button>\n          <button\n            className=\"btn\"\n            onClick={() => addMovieToWatched(movie)}\n            disabled={disableWatched}\n          >\n            Add to Watched\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ResultCard;\n"]},"metadata":{},"sourceType":"module"}