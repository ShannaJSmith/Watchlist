{"ast":null,"code":"var _jsxFileName = \"/Users/shannasmith/code/projects/watchlist/watchlist/src/context/GlobalState.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer, useEffect } from 'react';\nimport AppReducer from './AppReducer'; // inital state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  watchlist: localStorage.getItem('watchlist') ? JSON.parse(localStorage.getItem('watchlist')) : [],\n  watched: localStorage.getItem('watched') ? JSON.parse(localStorage.getItem('watched')) : []\n}; // create context\n\nexport const GlobalContext = /*#__PURE__*/createContext(initialState); // provider components\n\nexport const GlobalProvider = props => {\n  _s();\n\n  const [state, dispatch] = useReducer(AppReducer, initialState); // triggered every time state is changed (e.g. movie added to watchlist)\n\n  useEffect(() => {\n    // localstorage must be a string\n    localStorage.setItem('watchlist', JSON.stringify(state.watchlist));\n  }, [state]); // actions (tells app what to do after addmovie button is clicked)\n\n  const addMovieToWatchlist = movie => {\n    dispatch({\n      type: 'ADD_MOVIE_TO_WATCHLIST',\n      payload: movie\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      watchlist: state.watchlist,\n      watched: state.watched,\n      addMovieToWatchlist\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GlobalProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["/Users/shannasmith/code/projects/watchlist/watchlist/src/context/GlobalState.jsx"],"names":["React","createContext","useReducer","useEffect","AppReducer","initialState","watchlist","localStorage","getItem","JSON","parse","watched","GlobalContext","GlobalProvider","props","state","dispatch","setItem","stringify","addMovieToWatchlist","movie","type","payload","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,SAA3C,QAA4D,OAA5D;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAEC,YAAY,CAACC,OAAb,CAAqB,WAArB,IACPC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADO,GAEP,EAHe;AAInBG,EAAAA,OAAO,EAAEJ,YAAY,CAACC,OAAb,CAAqB,SAArB,IACLC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CADK,GAEL;AANe,CAArB,C,CASA;;AAEA,OAAO,MAAMI,aAAa,gBAAGX,aAAa,CAACI,YAAD,CAAnC,C,CAEP;;AACA,OAAO,MAAMQ,cAAc,GAAIC,KAAD,IAAW;AAAA;;AACvC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,UAAU,CAACE,UAAD,EAAaC,YAAb,CAApC,CADuC,CAGvC;;AACAF,EAAAA,SAAS,CAAC,MAAM;AACd;AACAI,IAAAA,YAAY,CAACU,OAAb,CAAqB,WAArB,EAAkCR,IAAI,CAACS,SAAL,CAAeH,KAAK,CAACT,SAArB,CAAlC;AACD,GAHQ,EAGN,CAACS,KAAD,CAHM,CAAT,CAJuC,CASvC;;AACA,QAAMI,mBAAmB,GAAIC,KAAD,IAAW;AACrCJ,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAE,wBAAR;AAAkCC,MAAAA,OAAO,EAAEF;AAA3C,KAAD,CAAR;AACD,GAFD;;AAIA,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLd,MAAAA,SAAS,EAAES,KAAK,CAACT,SADZ;AAELK,MAAAA,OAAO,EAAEI,KAAK,CAACJ,OAFV;AAGLQ,MAAAA;AAHK,KADT;AAAA,cAOGL,KAAK,CAACS;AAPT;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAzBM;;GAAMV,c;;KAAAA,c","sourcesContent":["import React, { createContext, useReducer, useEffect } from 'react';\nimport AppReducer from './AppReducer';\n\n// inital state\n\nconst initialState = {\n  watchlist: localStorage.getItem('watchlist')\n    ? JSON.parse(localStorage.getItem('watchlist'))\n    : [],\n  watched: localStorage.getItem('watched')\n    ? JSON.parse(localStorage.getItem('watched'))\n    : [],\n};\n\n// create context\n\nexport const GlobalContext = createContext(initialState);\n\n// provider components\nexport const GlobalProvider = (props) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  // triggered every time state is changed (e.g. movie added to watchlist)\n  useEffect(() => {\n    // localstorage must be a string\n    localStorage.setItem('watchlist', JSON.stringify(state.watchlist));\n  }, [state]);\n\n  // actions (tells app what to do after addmovie button is clicked)\n  const addMovieToWatchlist = (movie) => {\n    dispatch({ type: 'ADD_MOVIE_TO_WATCHLIST', payload: movie });\n  };\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        watchlist: state.watchlist,\n        watched: state.watched,\n        addMovieToWatchlist,\n      }}\n    >\n      {props.children}\n    </GlobalContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}